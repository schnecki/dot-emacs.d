;;; matlab-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from company-matlab-shell.el

(autoload 'company-matlab-shell "company-matlab-shell" "\
A `company-mode' completion backend for `matlab-shell'.
COMMAND is the item to complete.
ARG and IGNORED are ignored.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-matlab-shell" '("company-matlab-shell-"))


;;; Generated autoloads from linemark.el

(autoload 'enable-visual-studio-bookmarks "linemark" "\
Bind the viss bookmark functions to F2 related keys.
\\<global-map>
\\[viss-bookmark-toggle]     - Toggle a bookmark on this line.
\\[viss-bookmark-next-buffer]   - Move to the next bookmark.
\\[viss-bookmark-prev-buffer]   - Move to the previous bookmark.
\\[viss-bookmark-clear-all-buffer] - Clear all bookmarks." t)
(register-definition-prefixes "linemark" '("linemark-" "viss-bookmark-"))


;;; Generated autoloads from matlab.el

(autoload 'matlab-is-matlab-file "matlab" "\
Enter `matlab-mode' when file content is likely a MATLAB *.m file.
This will also enter `matlab-mode' for empty files *.m files when
`matlab-mode-for-new-mfiles' indicates as such.")
(add-to-list 'magic-mode-alist '(matlab-is-matlab-file . matlab-mode))
(autoload 'matlab-mode "matlab" "\
MATLAB(R) mode is a major mode for editing MATLAB dot-m files.
\\<matlab-mode-map>
Convenient editing commands are:
 \\[matlab-comment-region]   - Comment/Uncomment out a region of code.
 \\[matlab-complete-symbol]   - Symbol completion of matlab symbolsbased on the local syntax.

Convenient navigation commands are:
 \\[matlab-beginning-of-command]   - Move to the beginning of a command.
 \\[matlab-end-of-command]   - Move to the end of a command.

Convenient template insertion commands:
 \\[tempo-template-matlab-function] - Insert a function definition.
 \\[tempo-template-matlab-if] - Insert an IF END block.
 \\[tempo-template-matlab-for] - Insert a FOR END block.
 \\[tempo-template-matlab-switch] - Insert a SWITCH END statement.
 \\[matlab-insert-next-case] - Insert the next CASE condition in a SWITCH.
 \\[matlab-insert-end-block] - Insert a matched END statement.  With optional ARG, reindent.
 \\[matlab-stringify-region] - Convert plain text in region to a string with correctly quoted chars.

Variables:
  `matlab-indent-level'         Level to indent blocks.
  `matlab-continuation-indent-level' Level to indent after ... continuation
  `matlab-case-indent-level'            Level to unindent case statements.
  `matlab-indent-past-arg1-functions'
                                Regexp of functions to indent past the first
                                  argument on continuation lines.
  `matlab-maximum-indents'      List of maximum indents during lineups.
  `matlab-comment-column'       Goal column for on-line comments.
  `fill-column'                 Column used in auto-fill.
  `matlab-indent-function-body' If non-nil, indents body of MATLAB functions.
  `matlab-functions-have-end'   If non-nil, MATLAB functions terminate with end.
  `matlab-fill-code'            Non-nil, auto-fill code in `auto-fill-mode'.
  `matlab-fill-strings'         Non-nil, auto-fill strings in `auto-fill-mode'.
  `matlab-verify-on-save-flag'  Non-nil, enable code checks on save.
  `matlab-vers-on-startup'      If t, show version on start-up.
  `matlab-handle-simulink'      If t, enable simulink keyword highlighting.

All Key Bindings:
\\{matlab-mode-map}

(fn)" t)
(register-definition-prefixes "matlab" '("gud-matlab-debug-active" "matlab-" "ml-fl-anchor-limit"))


;;; Generated autoloads from matlab-ccount.el

(register-definition-prefixes "matlab-ccount" '("matlab-count-characters"))


;;; Generated autoloads from matlab-cgen.el

 (autoload 'matlab-insert-map-fcn "matlab-cgen" "Keymap for C-c C-c in matlab-mode" t 'keymap)
(register-definition-prefixes "matlab-cgen" '("matlab-"))


;;; Generated autoloads from matlab-compat.el

(register-definition-prefixes "matlab-compat" '("matlab-"))


;;; Generated autoloads from matlab-complete.el

(autoload 'matlab-property-function "matlab-complete" "\
Regexp of all builtin functions that take property lists." nil t)
(autoload 'matlab-complete-symbol "matlab-complete" "\
Complete a partially typed symbol in a MATLAB mode buffer.
Optional argument ARG is ignored.

(fn &optional ARG)" t)
(register-definition-prefixes "matlab-complete" '("matlab-"))


;;; Generated autoloads from matlab-netshell.el

(autoload 'matlab-netshell-server-active-p "matlab-netshell" "\
Return non-nil if there is an active MATLAB netshell server.")
(autoload 'matlab-netshell-server-start "matlab-netshell" "\
Start the MATLAB netshell server." t)
(register-definition-prefixes "matlab-netshell" '("matlab-netshell-"))


;;; Generated autoloads from matlab-org.el

(register-definition-prefixes "matlab-org" '("matlab--org-"))


;;; Generated autoloads from matlab-scan.el

(register-definition-prefixes "matlab-scan" '("matlab-" "mlf-"))


;;; Generated autoloads from matlab-sections.el

(autoload 'matlab-sections-mode "matlab-sections" "\
Highlight MATLAB-like sections and navigate between them.

The minor-mode provides the following interactive navigation
functions.  The default keybindings are provided in square brackets for
each:
1. `matlab-sections-forward-section' : Move point to the beginning of the
   section right below.  \\[matlab-sections-forward-section]
2. `matlab-sections-backward-section' : Move point to the end of the section
   right above.  \\[matlab-sections-backward-section]
3. `matlab-sections-beginning-of-section' : Move point to beginning of
   current section.  Return (point).  \\[matlab-sections-beginning-of-section]
4. `matlab-sections-end-of-section' : Move point to end of current section.
   Return (point).  \\[matlab-sections-end-of-section]
5. `matlab-sections-move-section-up' : Move the contents of the current section
   \"up\", so that it occurs before the previous.  \\[matlab-sections-move-section-up]
6. `matlab-sections-move-section-down' : Move the contents of the current
   section \"down\", so that it occurs after the next.  \\[matlab-sections-move-section-down]
7. `matlab-sections-run-till-point' : Run all the sections from beginning
   till previous section.  \\[matlab-sections-run-till-point]
8. `matlab-sections-mark-section' : Mark the current section.  \\[matlab-sections-mark-section]

This is a minor mode.  If called interactively, toggle the
`Matlab-Sections mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `matlab-sections-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'matlab-sections-mode-enable "matlab-sections" "\
Enable matlab-sections-mode.")
(autoload 'matlab-sections-mode-disable "matlab-sections" "\
Disable matlab-sections-mode.")
(register-definition-prefixes "matlab-sections" '("matlab-sections-"))


;;; Generated autoloads from matlab-shell.el

(autoload 'matlab-mode-determine-matlabroot "matlab-shell" "\
Return the MATLABROOT for the `matlab-shell-command'.")
(autoload 'matlab-shell "matlab-shell" "\
Create a buffer with MATLAB running as a subprocess.

MATLAB shell cannot work on the MS Windows platform because MATLAB is not
a console application." t)
(autoload 'matlab-shell-run-region "matlab-shell" "\
Run region from BEG to END and display result in MATLAB shell.
If NOSHOW is non-nil, replace newlines with commas to suppress
output.  This command requires an active MATLAB shell.

(fn BEG END &optional NOSHOW)" t)
(register-definition-prefixes "matlab-shell" '("gud-matlab-marker-regexp-prefix" "matlab-"))


;;; Generated autoloads from matlab-shell-gud.el

(autoload 'matlab-shell-mode-gud-enable-bindings "matlab-shell-gud" "\
Enable GUD features for `matlab-shell' in the current buffer.")
(autoload 'matlab-shell-gud-startup "matlab-shell-gud" "\
Configure GUD when a new `matlab-shell' is initialized.")
(autoload 'mlg-reset-breakpoints "matlab-shell-gud" "\
Remove all cached breakpoints.")
(autoload 'matlab-shell-gud-minor-mode "matlab-shell-gud" "\
Minor mode activated when `matlab-shell' K>> prompt is active.

This minor mode makes MATLAB buffers read only so simple keystrokes
activate debug commands.  It also enables tooltips to appear when the
mouse hovers over a symbol when debugging.
\\<matlab-shell-gud-minor-mode-map>
Debug commands are:
 \\[matlab-shell-gud-mode-edit]  - Edit file (toggle read-only)
            Allows editing file without causing MATLAB to exit debug mode.
 \\[mlgud-break]        - Add breakpoint (ebstop in FILE at point)
 \\[mlgud-remove]        - Remove breakpoint (ebclear in FILE at point)
 \\[mlgud-list-breakpoints]        - List breakpoints (ebstatus)
 \\[mlgud-step]        - Step (dbstep in)
 \\[mlgud-next]        - Next (dbstep)
 \\[mlgud-finish]        - Finish function (dbstep out)
 \\[mlgud-cont]        - Continue (dbcont)
 \\[matlab-shell-gud-show-symbol-value]        - Evaluate expression
 \\[mlg-show-stack]        - Where am I (ebstack)
 \\[mlgud-stop-subjob]        - Quit (dbquit)

This is a minor mode.  If called interactively, toggle the
`Matlab-Shell-Gud minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `matlab-shell-gud-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-matlab-shell-gud-minor-mode 'globalized-minor-mode t)
(defvar global-matlab-shell-gud-minor-mode nil "\
Non-nil if Global Matlab-Shell-Gud minor mode is enabled.
See the `global-matlab-shell-gud-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-matlab-shell-gud-minor-mode'.")
(custom-autoload 'global-matlab-shell-gud-minor-mode "matlab-shell-gud" nil)
(autoload 'global-matlab-shell-gud-minor-mode "matlab-shell-gud" "\
Toggle Matlab-Shell-Gud minor mode in all buffers.
With prefix ARG, enable Global Matlab-Shell-Gud minor mode if ARG is positive; otherwise, disable
it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Matlab-Shell-Gud minor mode is enabled in all buffers where `matlab-shell-gud-minor-mode-activator'
would do it.

See `matlab-shell-gud-minor-mode' for more information on Matlab-Shell-Gud minor mode.

(fn &optional ARG)" t)
(autoload 'matlab-shell-inactive-gud-minor-mode "matlab-shell-gud" "\
Minor mode activated when `matlab-shell' K>> prompt is inactive.

\\<matlab-shell-inactive-gud-minor-mode-map>
Debug commands are:
 \\[mlgud-break]        - Add breakpoint (ebstop in FILE at point)
 \\[mlgud-remove]        - Remove breakpoint (ebclear in FILE at point)
 \\[mlgud-list-breakpoints]        - List breakpoints (ebstatus)

This is a minor mode.  If called interactively, toggle the
`Matlab-Shell-Inactive-Gud minor mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `matlab-shell-inactive-gud-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-matlab-shell-inactive-gud-minor-mode 'globalized-minor-mode t)
(defvar global-matlab-shell-inactive-gud-minor-mode nil "\
Non-nil if Global Matlab-Shell-Inactive-Gud minor mode is enabled.
See the `global-matlab-shell-inactive-gud-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-matlab-shell-inactive-gud-minor-mode'.")
(custom-autoload 'global-matlab-shell-inactive-gud-minor-mode "matlab-shell-gud" nil)
(autoload 'global-matlab-shell-inactive-gud-minor-mode "matlab-shell-gud" "\
Toggle Matlab-Shell-Inactive-Gud minor mode in all buffers.
With prefix ARG, enable Global Matlab-Shell-Inactive-Gud minor mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Matlab-Shell-Inactive-Gud minor mode is enabled in all buffers where
`matlab-shell-gud-minor-mode-deactivator' would do it.

See `matlab-shell-inactive-gud-minor-mode' for more information on Matlab-Shell-Inactive-Gud minor
mode.

(fn &optional ARG)" t)
(register-definition-prefixes "matlab-shell-gud" '("gud-matlab-" "matlab-" "mlg-"))


;;; Generated autoloads from matlab-syntax.el

(register-definition-prefixes "matlab-syntax" '("matlab-"))


;;; Generated autoloads from matlab-topic.el

(autoload 'matlab-shell-help-mode "matlab-topic" "\
Major mode for viewing MATLAB help text.
Entry to this mode runs the normal hook `matlab-shell-help-mode-hook'.

Commands:
\\{matlab-shell-help-mode-map}

(fn)" t)
(register-definition-prefixes "matlab-topic" '("matlab-shell-"))


;;; Generated autoloads from mlgud.el

(defvar mlgud-tooltip-mode nil "\
Non-nil if Mlgud-Tooltip mode is enabled.
See the `mlgud-tooltip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `mlgud-tooltip-mode'.")
(custom-autoload 'mlgud-tooltip-mode "mlgud" nil)
(autoload 'mlgud-tooltip-mode "mlgud" "\
Toggle the display of MLGUD tooltips.
With a prefix argument ARG, enable the feature if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
it if ARG is omitted or nil.

(fn &optional ARG)" t)
(register-definition-prefixes "mlgud" '("mlgud-"))


;;; Generated autoloads from mlint.el

(autoload 'mlint-minor-mode "mlint" "\
Toggle mlint minor mode, a mode for showing mlint errors.
With prefix ARG, turn mlint minor mode on iff ARG is positive.
\\{mlint-minor-mode-map\\}

(fn &optional ARG)" t)
(register-definition-prefixes "mlint" '("mlint-"))


;;; Generated autoloads from semantic-matlab.el

(autoload 'semantic-default-matlab-setup "semantic-matlab" "\
Set up a buffer for parsing of MATLAB files.")
(register-definition-prefixes "semantic-matlab" '("matlab-semantic-" "semantic-"))


;;; Generated autoloads from semanticdb-matlab.el

(register-definition-prefixes "semanticdb-matlab" '("semantic"))


;;; Generated autoloads from tlc.el

(autoload 'tlc-mode "tlc" "\


(fn)" t)
(add-to-list 'auto-mode-alist '("\\.tlc\\'" . tlc-mode))
(register-definition-prefixes "tlc" '("tlc-"))

;;; End of scraped data

(provide 'matlab-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; matlab-mode-autoloads.el ends here
