Batch Normalization: Accelerating Deep Network Training by
Using mini-batches of examples, as opposed to one example at a time, is helpful in several ways. First, the gradient
of the loss over a mini-batch is an estimate of the gradient
over the training set, whose quality improves as the batch
size increases. Second, computation over a batch can be
much more efficient than m computations for individual
examples, due to the parallelism afforded by the modern
While stochastic gradient is simple and effective, it
requires careful tuning of the model hyper-parameters,
specifically the learning rate used in optimization, as well
as the initial values for the model parameters. The training is complicated by the fact that the inputs to each layer
are affected by the parameters of all preceding layers – so
that small changes to the network parameters amplify as
The change in the distributions of layers’ inputs
presents a problem because the layers need to continuously adapt to the new distribution. When the input distribution to a learning system changes, it is said to experience covariate shift (Shimodaira, 2000). This is typically
handled via domain adaptation (Jiang, 2008). However,
the notion of covariate shift can be extended beyond the
learning system as a whole, to apply to its parts, such as a
sub-network or a layer. Consider a network computing
Training Deep Neural Networks is complicated by the fact
that the distribution of each layer’s inputs changes during
training, as the parameters of the previous layers change.
This slows down the training by requiring lower learning
rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate
shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the
normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and
be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout.
Applied to a state-of-the-art image classification model,
Batch Normalization achieves the same accuracy with 14
times fewer training steps, and beats the original model
by a significant margin. Using an ensemble of batchnormalized networks, we improve upon the best published
result on ImageNet classification: reaching 4.9% top-5
validation error (and 4.8% test error), exceeding the accuracy of human raters.
Deep learning has dramatically advanced the state of the
art in vision, speech, and many other areas. Stochastic gradient descent (SGD) has proved to be an effective way of training deep networks, and SGD variants
such as momentum (Sutskever et al., 2013) and Adagrad
(Duchi et al., 2011) have been used to achieve state of the
art performance. SGD optimizes the parameters Θ of the
where F1 and F2 are arbitrary transformations, and the
parameters Θ1 , Θ2 are to be learned so as to minimize
the loss ℓ. Learning Θ2 can be viewed as if the inputs
x = F1 (u, Θ1 ) are fed into the sub-network
where x1...N is the training data set. With SGD, the training proceeds in steps, and at each step we consider a minibatch x1...m of size m. The mini-batch is used to approximate the gradient of the loss function with respect to the
(for batch size m and learning rate α) is exactly equivalent
to that for a stand-alone network F2 with input x. Therefore, the input distribution properties that make training
more efficient – such as having the same distribution between the training and test data – apply to training the
sub-network as well. As such it is advantageous for the
distribution of x to remain fixed over time. Then, Θ2 does
not have to readjust to compensate for the change in the
Fixed distribution of inputs to a sub-network would
have positive consequences for the layers outside the subnetwork, as well. Consider a layer with a sigmoid activation function z = g(W u + b) where u is the layer input,
the weight matrix W and bias vector b are the layer pa1
rameters to be learned, and g(x) = 1+exp(−x)
increases, g (x) tends to zero. This means that for all dimensions of x = W u+b except those with small absolute
values, the gradient flowing down to u will vanish and the
model will train slowly. However, since x is affected by
W, b and the parameters of all the layers below, changes
to those parameters during training will likely move many
dimensions of x into the saturated regime of the nonlinearity and slow down the convergence. This effect is
amplified as the network depth increases. In practice,
the saturation problem and the resulting vanishing gradients are usually addressed by using Rectified Linear Units
(Nair & Hinton, 2010) ReLU (x) = max(x, 0), careful
initialization (Bengio & Glorot, 2010; Saxe et al., 2013),
and small learning rates. If, however, we could ensure
that the distribution of nonlinearity inputs remains more
stable as the network trains, then the optimizer would be
less likely to get stuck in the saturated regime, and the
We define Internal Covariate Shift as the change in the
distribution of network activations due to the change in
network parameters during training. To improve the training, we seek to reduce the internal covariate shift. By
fixing the distribution of the layer inputs x as the training
progresses, we expect to improve the training speed. It has
been long known (LeCun et al., 1998b; Wiesler & Ney,
2011) that the network training converges faster if its inputs are whitened – i.e., linearly transformed to have zero
means and unit variances, and decorrelated. As each layer
observes the inputs produced by the layers below, it would
be advantageous to achieve the same whitening of the inputs of each layer. By whitening the inputs to each layer,
we would take a step towards achieving the fixed distributions of inputs that would remove the ill effects of the
We could consider whitening activations at every training step or at some interval, either by modifying the
network directly or by changing the parameters of the
optimization algorithm to depend on the network activation values (Wiesler et al., 2014; Raiko et al., 2012;
Povey et al., 2014; Desjardins & Kavukcuoglu). However, if these modifications are interspersed with the optimization steps, then the gradient descent step may attempt to update the parameters in a way that requires
the normalization to be updated, which reduces the effect of the gradient step. For example, consider a layer
with the input u that adds the learned bias b, and normalizes the result by subtracting the mean of the activation
x = u + b, X = {x1...N } is the set of values of x over
the training set, and E[x] = N1 i=1 xi . If a gradient
descent step ignores the dependence of E[x] on b, then it
will update b ← b + ∆b, where ∆b ∝ −∂ℓ/∂b
u + (b + ∆b) − E[u + (b + ∆b)] = u + b − E[u + b].
Thus, the combination of the update to b and subsequent
change in normalization led to no change in the output
of the layer nor, consequently, the loss. As the training
continues, b will grow indefinitely while the loss remains
fixed. This problem can get worse if the normalization not
only centers but also scales the activations. We have observed this empirically in initial experiments, where the
model blows up when the normalization parameters are
computed outside the gradient descent step.
The issue with the above approach is that the gradient
descent optimization does not take into account the fact
that the normalization takes place. To address this issue,
we would like to ensure that, for any parameter values,
the network always produces activations with the desired
distribution. Doing so would allow the gradient of the
loss with respect to the model parameters to account for
the normalization, and for its dependence on the model
parameters Θ. Let again x be a layer input, treated as a
We refer to the change in the distributions of internal
nodes of a deep network, in the course of training, as Internal Covariate Shift. Eliminating it offers a promise of
faster training. We propose a new mechanism, which we
call Batch Normalization, that takes a step towards reducing internal covariate shift, and in doing so dramatically accelerates the training of deep neural nets. It accomplishes this via a normalization step that fixes the
means and variances of layer inputs. Batch Normalization
also has a beneficial effect on the gradient flow through
the network, by reducing the dependence of gradients
on the scale of the parameters or of their initial values.
This allows us to use much higher learning rates without the risk of divergence. Furthermore, batch normalization regularizes the model and reduces the need for
Dropout (Srivastava et al., 2014). Finally, Batch Normalization makes it possible to use saturating nonlinearities
by preventing the network from getting stuck in the saturated modes.
In Sec. 4.2, we apply Batch Normalization to the bestperforming ImageNet classification network, and show
that we can match its performance using only 7% of the
training steps, and can further exceed its accuracy by a
substantial margin. Using an ensemble of such networks
trained with Batch Normalization, we achieve the top-5
error rate that improves upon the best known results on
vector, and X be the set of these inputs over the training we introduce, for each activation x(k) , a pair of parameters
data set. The normalization can then be written as a trans- γ (k) , β (k) , which scale and shift the normalized value:
which depends not only on the given training example x
but on all examples X – each of which depends on Θ if
x is generated by another layer. For backpropagation, we
These parameters are learned along with the original
model parameters, and restore the representation
of the network. Indeed, by setting γ (k) = Var[x(k) ] and
β (k) = E[x(k) ], we could recover the original activations,
In the batch setting where each training step is based on
the entire training set, we would use the whole set to normalize activations. However, this is impractical when using stochastic optimization. Therefore, we make the second simplification: since we use mini-batches in stochastic gradient training, each mini-batch produces estimates
of the mean and variance of each activation. This way, the
statistics used for normalization can fully participate in
the gradient backpropagation. Note that the use of minibatches is enabled by computation of per-dimension variances rather than joint covariances; in the joint case, regularization would be required since the mini-batch size is
likely to be smaller than the number of activations being
whitened, resulting in singular covariance matrices.
Consider a mini-batch B of size m. Since the normalization is applied to each activation independently, let us
focus on a particular activation x(k) and omit k for clarity.
We have m values of this activation in the mini-batch,
ignoring the latter term would lead to the explosion described above. Within this framework, whitening the layer
inputs is expensive, as it requires computing the covariance matrix Cov[x] = Ex∈X [xxT ] − E[x]E[x]T and its
inverse square root, to produce the whitened activations
Cov[x]−1/2 (x − E[x]), as well as the derivatives of these
transforms for backpropagation. This motivates us to seek
an alternative that performs input normalization in a way
that is differentiable and does not require the analysis of
the entire training set after every parameter update.
(Lyu & Simoncelli, 2008)) use statistics computed
over a single training example, or, in the case of image
networks, over different feature maps at a given location.
However, this changes the representation ability of a
network by discarding the absolute scale of activations.
We want to a preserve the information in the network, by
normalizing the activations in a training example relative
to the statistics of the entire training data.
b1...m , and their linear transformations be y1...m . We refer to the transform
as the Batch Normalizing Transform. We present the BN
Transform in Algorithm 1. In the algorithm, ǫ is a constant
added to the mini-batch variance for numerical stability.
Since the full whitening of each layer’s inputs is costly
and not everywhere differentiable, we make two necessary simplifications. The first is that instead of whitening
the features in layer inputs and outputs jointly, we will Input: Values of x over a mini-batch: B = {x1...m };
normalize each scalar feature independently, by making it
have the mean of zero and the variance of 1. For a layer Output: {yi = BNγ,β (xi )}
with d-dimensional input x = (x(1) . . . x(d) ), we will norm
where the expectation and variance are computed over the
training data set. As shown in (LeCun et al., 1998b), such
normalization speeds up convergence, even when the features are not decorrelated.
Note that simply normalizing each input of a layer may
change what the layer can represent. For instance, nor- Algorithm 1: Batch Normalizing Transform, applied to
malizing the inputs of a sigmoid would constrain them to activation x over a mini-batch.
the linear regime of the nonlinearity. To address this, we
make sure that the transformation inserted in the network
The BN transform can be added to a network to manipcan represent the identity transform. To accomplish this, ulate any activation. In the notation y = BNγ,β (x), we
indicate that the parameters γ and β are to be learned,
but it should be noted that the BN transform does not
independently process the activation in each training example. Rather, BNγ,β (x) depends both on the training
example and the other examples in the mini-batch. The
scaled and shifted values y are passed to other network
transformation, but their presence is crucial. The distributions of values of any x
and the variance of 1, as long as the elements of each
mini-batch are sampled from the same distribution, and
if we neglect ǫ. ThisPcan be seen by observing that
an input to a sub-network composed of the linear transform y (k) = γ (k) x
b(k) + β (k) , followed by the other processing done by the original network. These sub-network
inputs all have fixed means and variances, and although
the joint distribution of these normalized x
over the course of training, we expect that the introduction of normalized inputs accelerates the training of the
sub-network and, consequently, the network as a whole.
During training we need to backpropagate the gradient of loss ℓ through this transformation, as well as compute the gradients with respect to the parameters of the
BN transform. We use chain rule, as follows (before simplification):
using the population, rather than mini-batch, statistics.
Neglecting ǫ, these normalized activations have the same
mean 0 and variance 1 as during training. We use the unm
the expectation is over training mini-batches of size m and
σB2 are their sample variances. Using moving averages instead, we can track the accuracy of a model as it trains.
Since the means and variances are fixed during inference,
the normalization is simply a linear transform applied to
each activation. It may further be composed with the scaling by γ and shift by β, to yield a single linear transform
that replaces BN(x). Algorithm 2 summarizes the procedure for training batch-normalized networks.
Input: Network N with trainable parameters Θ;
Output: Batch-normalized network for inference, Ninf
Add transformation y (k) = BNγ (k) ,β (k) (x(k) ) to
6: Train NBN to optimize the parameters Θ ∪
7: NBN ← NBN // Inference BN network with frozen
(Duchi et al., 2011). The normalization of activations that
depends on the mini-batch allows efficient training, but is
neither necessary nor desirable during inference; we want
the output to depend only on the input, deterministically.
For this, once the network has been trained, we use the
Thus, BN transform is a differentiable transformation that
introduces normalized activations into the network. This
ensures that as the model is training, layers can continue
learning on input distributions that exhibit less internal covariate shift, thus accelerating the training. Furthermore,
the learned affine transform applied to these normalized
activations allows the BN transform to represent the identity transformation and preserves the network capacity.
// For clarity, x ≡ x(k) , γ ≡ γ (k) , µB ≡ µB , etc.
Process multiple training mini-batches B, each of
3.1 Training and Inference with BatchNormalized Networks
Algorithm 2: Training a Batch-Normalized Network
To Batch-Normalize a network, we specify a subset of activations and insert the BN transform for each of them,
according to Alg. 1. Any layer that previously received 3.2 Batch-Normalized Convolutional Netx as the input, now receives BN(x). A model employing
Batch Normalization can be trained using batch gradient
descent, or Stochastic Gradient Descent with a mini-batch Batch Normalization can be applied to any set of actisize m > 1, or with any of its variants such as Adagrad vations in the network. Here, we focus on transforms
that consist of an affine transformation followed by an
the gradient during backpropagation and lead to the model
explosion. However, with Batch Normalization, backpropagation through a layer is unaffected by the scale of
where W and b are learned parameters of the model, and
g(·) is the nonlinearity such as sigmoid or ReLU. This formulation covers both fully-connected and convolutional
layers. We add the BN transform immediately before the
nonlinearity, by normalizing x = W u + b. We could have
also normalized the layer inputs u, but since u is likely
the output of another nonlinearity, the shape of its distribution is likely to change during training, and constraining
its first and second moments would not eliminate the covariate shift. In contrast, W u + b is more likely to have
a symmetric, non-sparse distribution, that is “more Gaussian” (Hyvärinen & Oja, 2000); normalizing it is likely to
produce activations with a stable distribution.
Note that, since we normalize W u+b, the bias b can be
ignored since its effect will be canceled by the subsequent
mean subtraction (the role of the bias is subsumed by β in
Alg. 1). Thus, z = g(W u + b) is replaced with
The scale does not affect the layer Jacobian nor, consequently, the gradient propagation. Moreover, larger
weights lead to smaller gradients, and Batch Normalization will stabilize the parameter growth.
We further conjecture that Batch Normalization may
lead the layer Jacobians to have singular values close to 1,
which is known to be beneficial for training (Saxe et al.,
2013). Consider two consecutive layers with normalized
inputs, and the transformation between these normalized
x is a linear transformation for the given model parameters, then both b
have unit covariances, and I = Cov[bz] = JCov[b
JJ T . Thus, JJ T = I, and so all singular values of J
are equal to 1, which preserves the gradient magnitudes
during backpropagation. In reality, the transformation is
not linear, and the normalized values are not guaranteed to
be Gaussian nor independent, but we nevertheless expect
Batch Normalization to help make gradient propagation
better behaved. The precise effect of Batch Normalization on gradient propagation remains an area of further
where the BN transform is applied independently to each
dimension of x = W u, with a separate pair of learned
For convolutional layers, we additionally want the normalization to obey the convolutional property – so that
different elements of the same feature map, at different
locations, are normalized in the same way. To achieve
this, we jointly normalize all the activations in a minibatch, over all locations. In Alg. 1, we let B be the set of
all values in a feature map across both the elements of a
mini-batch and spatial locations – so for a mini-batch of
size m and feature maps of size p × q, we use the effec- 3.4 Batch Normalization regularizes the
tive mini-batch of size m′ = |B| = m · p q. We learn a
pair of parameters γ (k) and β (k) per feature map, rather
than per activation. Alg. 2 is modified similarly, so that When training with Batch Normalization, a training exduring inference the BN transform applies the same linear ample is seen in conjunction with other examples in the
transformation to each activation in a given feature map. mini-batch, and the training network no longer producing deterministic values for a given training example. In
our experiments, we found this effect to be advantageous
Batch Normalization enables higher to the generalization of the network. Whereas Dropout
(Srivastava et al., 2014) is typically used to reduce overIn traditional deep networks, too-high learning rate may fitting, in a batch-normalized network we found that it can
result in the gradients that explode or vanish, as well as be either removed or reduced in strength.
getting stuck in poor local minima. Batch Normalization helps address these issues. By normalizing activations throughout the network, it prevents small changes
to the parameters from amplifying into larger and suboptimal changes in activations in gradients; for instance, it
prevents the training from getting stuck in the saturated
Batch Normalization also makes training more resilient
to the parameter scale. Normally, large learning rates may
increase the scale of layer parameters, which then amplify
To verify the effects of internal covariate shift on training, and the ability of Batch Normalization to combat it,
we considered the problem of predicting the digit class on
the MNIST dataset (LeCun et al., 1998a). We used a very
simple network, with a 28x28 binary image as input, and
details are given in the Appendix. We refer to this model
as Inception in the rest of the text. The model was trained
using a version of Stochastic Gradient Descent with moWith BN
mentum (Sutskever et al., 2013), using the mini-batch size
of 32. The training was performed using a large-scale, dis(a)
tributed architecture (similar to (Dean et al., 2012)). All
Figure 1: (a) The test accuracy of the MNIST network networks are evaluated as training progresses by computtrained with and without Batch Normalization, vs. the ing the validation accuracy @1, i.e. the probability of
number of training steps. Batch Normalization helps the predicting the correct label out of 1000 possibilities, on
network train faster and achieve higher accuracy. (b, a held-out set, using a single crop per image.
c) The evolution of input distributions to a typical sigIn our experiments, we evaluated several modifications
moid, over the course of training, shown as {15, 50, 85}th of Inception with Batch Normalization. In all cases, Batch
percentiles. Batch Normalization makes the distribution Normalization was applied to the input of each nonlinearmore stable and reduces the internal covariate shift.
ity, in a convolutional way, as described in section 3.2,
while keeping the rest of the architecture constant.
3 fully-connected hidden layers with 100 activations each.
Each hidden layer computes y = g(W u+b) with sigmoid
nonlinearity, and the weights W initialized to small random Gaussian values. The last hidden layer is followed
by a fully-connected layer with 10 activations (one per
class) and cross-entropy loss. We trained the network for
50000 steps, with 60 examples per mini-batch. We added
Batch Normalization to each hidden layer of the network,
as in Sec. 3.1. We were interested in the comparison between the baseline and batch-normalized networks, rather
than achieving the state of the art performance on MNIST
(which the described architecture does not).
Figure 1(a) shows the fraction of correct predictions
by the two networks on held-out test data, as training
progresses. The batch-normalized network enjoys the
higher test accuracy. To investigate why, we studied inputs to the sigmoid, in the original network N and batchnormalized network Ntr
BN (Alg. 2) over the course of training. In Fig. 1(b,c) we show, for one typical activation from
the last hidden layer of each network, how its distribution evolves. The distributions in the original network
change significantly over time, both in their mean and
the variance, which complicates the training of the subsequent layers. In contrast, the distributions in the batchnormalized network are much more stable as training progresses, which aids the training.
Simply adding Batch Normalization to a network does not
take full advantage of our method. To do so, we further
changed the network and its training parameters, as follows:
Increase learning rate. In a batch-normalized model,
we have been able to achieve a training speedup from
higher learning rates, with no ill side effects (Sec. 3.3).
Remove Dropout. As described in Sec. 3.4, Batch Normalization fulfills some of the same goals as Dropout. Removing Dropout from Modified BN-Inception speeds up
training, without increasing overfitting.
Reduce the L2 weight regularization. While in Inception an L2 loss on the model parameters controls overfitting, in Modified BN-Inception the weight of this loss is
reduced by a factor of 5. We find that this improves the
accuracy on the held-out validation data.
Accelerate the learning rate decay. In training Inception, learning rate was decayed exponentially. Because
our network trains faster than Inception, we lower the
Remove Local Response Normalization While Inception and other networks (Srivastava et al., 2014) benefit
from it, we found that with Batch Normalization it is not
Shuffle training examples more thoroughly. We enabled
shuffling of the training data, which prevents
We applied Batch Normalization to a new variant of the
Inception network (Szegedy et al., 2014), trained on the
about 1% improvements in the valImageNet classification task (Russakovsky et al., 2014).
The network has a large number of convolutional and
regularizer (Sec. 3.4): the ranpooling layers, with a softmax layer to predict the image
method should be most beneclass, out of 1000 possibilities. Convolutional layers use
ReLU as the nonlinearity. The main difference to the netseen.
work described in (Szegedy et al., 2014) is that the 5 × 5
Reduce the photometric distortions. Because batchconvolutional layers are replaced by two consecutive layers of 3 × 3 convolutions with up to 128 filters. The net- normalized networks train faster and observe each trainwork contains 13.6 · 106 parameters, and, other than the ing example fewer times, we let the trainer focus on more
top softmax layer, has no fully-connected layers. More “real” images by distorting them less.
Figure 2: Single crop validation accuracy of Inception
and its batch-normalized variants, vs. the number of
Figure 3: For Inception and the batch-normalized
variants, the number of training steps required to
reach the maximum accuracy of Inception (72.2%),
and the maximum accuracy achieved by the network.
to be trained when sigmoid is used as the nonlinearity,
despite the well-known difficulty of training such netWe evaluated the following networks, all trained on the works. Indeed, BN-x5-Sigmoid achieves the accuracy of
LSVRC2012 training data, and tested on the validation 69.8%. Without Batch Normalization, Inception with sigdata:
moid never achieves better than 1/1000 accuracy.
Inception: the network described at the beginning of
Section 4.2, trained with the initial learning rate of 0.0015.
BN-Baseline: Same as Inception with Batch Normal- 4.2.3 Ensemble Classification
The current reported best results on the ImageNet Large
BN-x5: Inception with Batch Normalization and the Scale Visual Recognition Competition are reached by the
modifications in Sec. 4.2.1. The initial learning rate was Deep Image ensemble of traditional models (Wu et al.,
increased by a factor of 5, to 0.0075. The same learning 2015) and the ensemble model of (He et al., 2015). The
rate increase with original Inception caused the model pa- latter reports the top-5 error of 4.94%, as evaluated by the
ILSVRC server. Here we report a top-5 validation error of
BN-x30: Like BN-x5, but with the initial learning rate 4.9%, and test error of 4.82% (according to the ILSVRC
server). This improves upon the previous best result, and
BN-x5-Sigmoid: Like BN-x5, but with sigmoid non- exceeds the estimated accuracy of human raters according
instead of ReLU. We also at- to (Russakovsky et al., 2014).
tempted to train the original Inception with sigmoid, but
For our ensemble, we used 6 networks. Each was based
the model remained at the accuracy equivalent to chance. on BN-x30, modified via some of the following: increased
In Figure 2, we show the validation accuracy of the initial weights in the convolutional layers; using Dropout
networks, as a function of the number of training steps. (with the Dropout probability of 5% or 10%, vs. 40%
Inception reached the accuracy of 72.2% after 31 · 106 for the original Inception); and using non-convolutional,
training steps. The Figure 3 shows, for each network, per-activation Batch Normalization with last hidden laythe number of training steps required to reach the same ers of the model. Each network achieved its maximum
72.2% accuracy, as well as the maximum validation accu- accuracy after about 6 · 106 training steps. The ensemble
racy reached by the network and the number of steps to prediction was based on the arithmetic average of class
probabilities predicted by the constituent networks. The
By only using Batch Normalization (BN-Baseline), we details of ensemble and multicrop inference are similar to
match the accuracy of Inception in less than half the num- (Szegedy et al., 2014).
ber of training steps. By applying the modifications in
We demonstrate in Fig. 4 that batch normalization alSec. 4.2.1, we significantly increase the training speed of lows us to set new state-of-the-art by a healthy margin on
the network. BN-x5 needs 14 times fewer steps than In- the ImageNet classification challenge benchmarks.
ception to reach the 72.2% accuracy. Interestingly, increasing the learning rate further (BN-x30) causes the
model to train somewhat slower initially, but allows it to 5 Conclusion
reach a higher final accuracy. It reaches 74.8% after 6·106
steps, i.e. 5 times fewer steps than required by Inception We have presented a novel mechanism for dramatically
accelerating the training of deep networks. It is based on
We also verified that the reduction in internal covari- the premise that covariate shift, which is known to comate shift allows deep networks with Batch Normalization plicate the training of machine learning systems, also ap4.2.2 Single-Network Classification
Figure 4: Batch-Normalized Inception comparison with previous state of the art on the provided validation set comprising 50000 images. *BN-Inception ensemble has reached 4.82% top-5 error on the 100000 images of the test set of
the ImageNet as reported by the test server.
plies to sub-networks and layers, and removing it from
internal activations of the network may aid in training.
Our proposed method draws its power from normalizing
activations, and from incorporating this normalization in
the network architecture itself. This ensures that the normalization is appropriately handled by any optimization
method that is being used to train the network. To enable stochastic optimization methods commonly used in
deep network training, we perform the normalization for
each mini-batch, and backpropagate the gradients through
the normalization parameters. Batch Normalization adds
only two extra parameters per activation, and in doing so
preserves the representation ability of the network. We
presented an algorithm for constructing, training, and performing inference with batch-normalized networks. The
resulting networks can be trained with saturating nonlinearities, are more tolerant to increased training rates, and
often do not require Dropout for regularization.
entiating characteristics of Batch Normalization include
the learned scale and shift that allow the BN transform
to represent identity (the standardization layer did not require this since it was followed by the learned linear transform that, conceptually, absorbs the necessary scale and
shift), handling of convolutional layers, deterministic inference that does not depend on the mini-batch, and batchnormalizing each convolutional layer in the network.
In this work, we have not explored the full range of
possibilities that Batch Normalization potentially enables.
Our future work includes applications of our method to
Recurrent Neural Networks (Pascanu et al., 2013), where
the internal covariate shift and the vanishing or exploding
gradients may be especially severe, and which would allow us to more thoroughly test the hypothesis that normalization improves gradient propagation (Sec. 3.3). We plan
to investigate whether Batch Normalization can help with
domain adaptation, in its traditional sense – i.e. whether
Merely adding Batch Normalization to a state-of-the- the normalization performed by the network would alart image classification model yields a substantial speedup low it to more easily generalize to new data distribuin training. By further increasing the learning rates, re- tions, perhaps with just a recomputation of the population
moving Dropout, and applying other modifications af- means and variances (Alg. 2). Finally, we believe that furforded by Batch Normalization, we reach the previous ther theoretical analysis of the algorithm would allow still
state of the art with only a small fraction of training steps more improvements and applications.
– and then beat the state of the art in single-network image
classification. Furthermore, by combining multiple models trained with Batch Normalization, we perform better References
than the best known system on ImageNet, by a significant
Bengio, Yoshua and Glorot, Xavier. Understanding the
difficulty of training deep feedforward neural networks.
Interestingly, our method bears similarity to the stanIn Proceedings of AISTATS 2010, volume 9, pp. 249–
dardization layer of (Gülçehre & Bengio, 2013), though
the two methods stem from very different goals, and perform different tasks. The goal of Batch Normalization Dean, Jeffrey, Corrado, Greg S., Monga, Rajat, Chen, Kai,
is to achieve a stable distribution of activation values
Devin, Matthieu, Le, Quoc V., Mao, Mark Z., Ranzato,
throughout training, and in our experiments we apply it
Marc’Aurelio, Senior, Andrew, Tucker, Paul, Yang, Ke,
before the nonlinearity since that is where matching the
and Ng, Andrew Y. Large scale distributed deep netfirst and second moments is more likely to result in a
stable distribution. On the contrary, (Gülçehre & Bengio,
2013) apply the standardization layer to the output of the Desjardins, Guillaume and Kavukcuoglu, Koray. Natural
nonlinearity, which results in sparser activations. In our
large-scale image classification experiments, we have not
observed the nonlinearity inputs to be sparse, neither with Duchi, John, Hazan, Elad, and Singer, Yoram. Adaptive
nor without Batch Normalization. Other notable differsubgradient methods for online learning and stochastic
Saxe, Andrew M., McClelland, James L., and Ganguli,
Surya. Exact solutions to the nonlinear dynamics
of learning in deep linear neural networks. CoRR,
optimization. J. Mach. Learn. Res., 12:2121–2159, July
Gülçehre, Çaglar and Bengio, Yoshua. Knowledge matters: Importance of prior information for optimization.
Shimodaira, Hidetoshi. Improving predictive inference
under covariate shift by weighting the log-likelihood
He, K., Zhang, X., Ren, S., and Sun, J. Delving Deep
function. Journal of Statistical Planning and Inference,
into Rectifiers: Surpassing Human-Level Performance
on ImageNet Classification. ArXiv e-prints, February
Srivastava, Nitish, Hinton, Geoffrey, Krizhevsky, Alex,
Sutskever, Ilya, and Salakhutdinov, Ruslan. Dropout:
A simple way to prevent neural networks from overfitHyvärinen, A. and Oja, E. Independent component analting. J. Mach. Learn. Res., 15(1):1929–1958, January
ysis: Algorithms and applications. Neural Netw., 13
Sutskever, Ilya, Martens, James, Dahl, George E., and
Hinton, Geoffrey E. On the importance of initialization and momentum in deep learning. In ICML
(3), volume 28 of JMLR Proceedings, pp. 1139–1147.
LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P.
Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11):2278–2324,
Szegedy, Christian, Liu, Wei, Jia, Yangqing, Sermanet,
Pierre, Reed, Scott, Anguelov, Dragomir, Erhan, Dumitru, Vanhoucke, Vincent, and Rabinovich, AnLeCun, Y., Bottou, L., Orr, G., and Muller, K. Efficient
drew. Going deeper with convolutions. CoRR,
backprop. In Orr, G. and K., Muller (eds.), Neural Netabs/1409.4842, 2014.
works: Tricks of the trade. Springer, 1998b.
Jiang, Jing. A literature survey on domain adaptation of
Lyu, S and Simoncelli, E P. Nonlinear image representa- Wiesler, Simon and Ney, Hermann. A convergence analysis of log-linear training. In Shawe-Taylor, J., Zemel,
tion using divisive normalization. In Proc. Computer
R.S., Bartlett, P., Pereira, F.C.N., and Weinberger, K.Q.
Vision and Pattern Recognition, pp. 1–8. IEEE Com(eds.), Advances in Neural Information Processing Sysputer Society, Jun 23-28 2008. doi: 10.1109/CVPR.
24, pp. 657–665, Granada, Spain, December 2011.
Wiesler, Simon, Richard, Alexander, Schlüter, Ralf, and
Ney, Hermann. Mean-normalized stochastic gradient
for large-scale deep learning. In IEEE International
Conference on Acoustics, Speech, and Signal Processing, pp. 180–184, Florence, Italy, May 2014.
Pascanu, Razvan, Mikolov, Tomas, and Bengio, Yoshua.
On the difficulty of training recurrent neural networks. Wu, Ren, Yan, Shengen, Shan, Yi, Dang, Qingqing, and
In Proceedings of the 30th International Conference on
Sun, Gang. Deep image: Scaling up image recognition,
Machine Learning, ICML 2013, Atlanta, GA, USA, 162015.
Nair, Vinod and Hinton, Geoffrey E. Rectified linear units
improve restricted boltzmann machines. In ICML, pp.
Povey, Daniel, Zhang, Xiaohui, and Khudanpur, Sanjeev. Parallel training of deep neural networks with
natural gradient and parameter averaging. CoRR,
Raiko, Tapani, Valpola, Harri, and LeCun, Yann. Deep
learning made easier by linear transformations in perceptrons. In International Conference on Artificial Intelligence and Statistics (AISTATS), pp. 924–932, 2012.
Figure 5 documents the changes that were performed
compared to the architecture with respect to the
GoogleNet archictecture. For the interpretation of this
table, please consult (Szegedy et al., 2014). The notable
architecture changes compared to the GoogLeNet model
Russakovsky, Olga, Deng, Jia, Su, Hao, Krause, Jonathan, include:
Satheesh, Sanjeev, Ma, Sean, Huang, Zhiheng, Karpa• The 5×5 convolutional layers are replaced by two
thy, Andrej, Khosla, Aditya, Bernstein, Michael, Berg,
consecutive 3×3 convolutional layers. This inAlexander C., and Fei-Fei, Li. ImageNet Large Scale
creases the maximum depth of the network by 9
weight layers. Also it increases the number of parameters by 25% and the computational cost is increased by about 30%.
• The number 28×28 inception modules is increased
• Inside the modules, sometimes average, sometimes
maximum-pooling is employed. This is indicated in
the entries corresponding to the pooling layers of the
• There are no across the board pooling layers between any two Inception modules, but stride-2 convolution/pooling layers are employed before the filter concatenation in the modules 3c, 4e.
Our model employed separable convolution with depth
multiplier 8 on the first convolutional layer. This reduces
the computational cost while increasing the memory consumption at training time.
