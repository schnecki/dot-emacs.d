International Journal of Production Research
The study of real time scheduling by an intelligent
Ruey-Shiang Guha, Yeou-Ren Shiueb* and Tsung-Yuan Tsengb
Institute of Industrial Engineering and Management, Department of Industrial Management,
National Formosa University, Huwei, Yunlin, Taiwan, Republic of China; bDepartment of
Information Management, Huafan University, No. 1, Huafan Road, Shihding Township,
Taipei County, 22301, Taiwan, Republic of China
(Received 16 September 2009; final version received 10 March 2010)
Earlier studies indicated that using multiple dispatching rules (MDRs) for the
various zones in the system can enhance the production performance to a greater
extent than using a single dispatching rule (SDR) over a given scheduling interval
for all the machines in the system, since MDRs employ the multi-pass simulation
approach for real-time scheduling (RTS). However, if a classical machine learning
approach is used, an RTS knowledge base (KB) can be developed by using the
appropriate MDRs strategy (this method is called an intelligent multi-controller
in this paper) as obtained from training examples. The main disadvantage of
using MDRs is that the classes (scheduling decision variables) to which training
examples are assigned must be provided. Hence, developing an RTS KB using the
intelligent multi-controller approach becomes an intolerably time-consuming task
because MDRs for the next scheduling period must be determined. To address
this issue, we proposed an intelligent multi-controller incorporating three main
mechanisms: (1) simulation-based training example generation mechanism,
(2) data pre-processing mechanism and (3) SOM-based real time MDRs selection
mechanism. Under various performance criteria over a long period, the proposed
approach yields better system performance than the machine learning-based RTS
using the SDR approach and heuristic individual dispatching rules.
Keywords: real-time scheduling; shop floor control; CIM; FMS control; machine
Modern manufacturing enterprises must provide a wide range of low-cost, high-quality
products within a short period of time, and many enterprises are now resorting to
e-manufacturing and flexible manufacturing system (FMS) technologies to achieve this
objective (Lee 2003, Qiu et al. 2003, Shnits and Sinreich 2006). Many researchers (Cho and
Wysk 1995, Liu and MacCarthy 1996) believe that the development of an efficient
scheduling mechanism is the key to satisfying various performance criteria for FMS
Real-time scheduling (i.e. dynamic dispatching mechanism) (RTS) employs different
dispatching rules in a dynamic and multi-pass manner which considers the current status
of a system at each decision point over a series of scheduling periods to meet the
*Corresponding author. Email: yrshiue@cc.hfu.edu.tw
ISSN 0020–7543 print/ISSN 1366–588X online
requirements of the shop floor (Cho and Wysk 1993, Park et al. 1997, Shiue 2009b). Two
main approaches are used for RTS: the multi-pass simulation approach (Wu and Wysk
1989, Ishii and Talavage 1994) and the machine learning approach (called intelligent
A multi-pass simulation evaluates the candidate dispatching rules and selects the best
strategy based on simulated information such as the current system status, and
management goals for each short scheduling period. The multi-pass simulation approach
is inadequate for shop floor control owing to its requirement for extensive effort in
computation to select the best dispatching rule for each scheduling period.
With the machine learning approach, in the field of artificial intelligence, a set of
training examples generated by system simulations are used to determine which is the best
dispatching rule for each possible system state; although the collecting training examples
and learning process to acquire knowledge base (KB) of RTS by the intelligent controller
approach tends to be time-consuming and relatively slow. Such KB has the advantage of
quickly yielding fast and acceptable solutions to make decisions in real time and can
conform to operation characteristics in the dynamic manufacturing environment (Shiue
Earlier studies have defined three major machine learning approaches for constructing
an RTS system KB: artificial neural networks (ANNs), decision tree (DT) learning, and
Rumelhart et al. (1986) have shown the suitability of ANN for automatic learning,
association, generalisation, and pattern recognition; the ANN provides nonlinear
transformations for modelling highly complex functions. Owing to the interconnection
between dynamic considerations in the manufacturing cell, it is necessary to investigate the
possibility of using ANN for learning and performing RTS. By applying the ANN
approach to dynamic dispatching mechanisms (Cho and Wysk 1993, Arzi and Iaroslavitz
1999, Priore et al. 2006, Shiue and Guh 2006) it is developed for a set of training samples,
each of which comprises a vector of system attribute values and the corresponding
dispatching rules. A trained ANN can provide a preference indicator of candidate
dispatching rules for a given system status.
The use of a DT learning approach in RTS system to improve the production of
a manufacturing system has yielded outstanding results in recent researches (Park et al.
1997, Arzi and Iaroslavitz 2000, Su and Shiue 2003, Kwak and Yih 2004, Priore et al.
2006). Most DT learning algorithms are variations of an algorithm that employs a topdown greedy search through the space of the possible DTs. This approach, exemplified by
the ID3 algorithm (Quinlan 1986, 1987) and its successor C4.5 (Quinlan 1993), are
the primary foci of research in the DT learning field. The learned knowledge is presented in
the form of either DTs or sets of if-then rules. The major advantage of the DT learning
approach is that knowledge can be easily coded into machine cell dynamic dispatching
selection mechanism, which can improve its readability.
A SVM was developed by Vapnik (1999). This type of learning machine is based on the
statistical learning theory. A special property of SVMs is that they minimise the empirical
classification error and maximise the geometric margin simultaneously; hence, they are
also known as maximum margin classifiers. An earlier study by Shiue (2009a) indicates
that the use of an integrated genetic algorithm (GA) (Goldberg 1989) and the SVM
approach to build an RTS system KB can yield good system performance compared with
classical SVM-based RTS and heuristic individual dispatching rules under various
International Journal of Production Research
Based on earlier studies, two strategies determine the dispatching rules in the RTS
system: single dispatching rule (SDR) or multiple dispatching rules (MDRs) for
manufacturing cell. A SDR is usually assigned heuristic individual dispatching rule for
all machines in a system during a given scheduling interval (i.e. scheduling period),
whereas MDRs assign different dispatching rules (i.e. scheduling decision variables) for all
machines in a system. Figure 1 depicts the role of MDRs in this study. For F1, F2, F3, and
load/unload stations, the MDRs method here selects the SPT, SRPT, DS, and EDD
dispatching rule, respectively, as the scheduling decision variables for job selection in the
next scheduling period. Ishii and Talavage (1994) proposed a search algorithm that uses
MDRs at bottleneck machines using predictions based on multi-pass simulation. Their
results show that the MDRs strategy can improve the performance of a FMS by up to
15.9% in comparison with the best result obtained using the SDR strategy. However, their
approach was not well suited to a RTS system based on machine learning.
The classical machine learning approach builds up a RTS KB through a MDRs
strategy. This method will henceforth be referred to as an intelligent multi-controller
strategy. Its main disadvantage is that the classes (scheduling decision variables) to which
training examples are assigned must be provided at the start. For example, for a given set
of system attributes, the best dispatching rule can be determined from the set of candidate
dispatching rules and identified by simulation (in short scheduling period) for each
scheduling decision variable. The resulting MDRs are considered as a class. However, this
process becomes intolerably time-consuming because the rules must be determined for
each period (Kim et al. 1998). Furthermore, the local approach, be it by DT learning or
by SVMs, does not satisfy the global objective function (i.e. the overall production
performance of the shop floor). In other words, although the best decision rule can be
determined for each scheduling decision variable, the combination of all the decision rules
may not simultaneously satisfy the global objective function. However, very little research
has focused on harmonising RTS by using intelligent multi-controller to meet global
Clustering is a data mining technique (Han and Kamber 2006) that involves grouping
the data into classes or clusters such that patterns in the data within each cluster are highly
Figure 1. The role of MDRs in this study.
similar but patterns in different clusters are considerably dissimilar. The training data
is clustered such that current decision rules are defined on the basis of a common
characteristic, which is considered as a system attribute. The correspondence between
adequate (but not optimal) MDRs on the basis of various performance criteria can be used
to assign the same decision rules to a single class. Kohonen’s self-organising map (SOM)
neural network (Kohonen 2001) is the most widely used technique and is an excellent
testing tool for data mining (Vesanto and Alhoniemi 2000). According to various system
statuses and current MDRs, a number of MDRs classes based on various performance
criteria can be generated by SOM clustering. Hence, SOM clustering and MDRs
selection algorithms are a promising avenue for constructing an intelligent multi-controller
This study seeks to develop an intelligent multi-controller that uses SOM-based realtime MDRs selection mechanism to support an RTS system. We believe that the proposed
approach can provide a better system performance than the machine learning-based RTS
based on the SDR approach and heuristic individual dispatching rules based on various
performance criteria. This is the main contribution in this study.
This paper is divided into five sections. In Section 2, the relevant theoretical
background of SOM algorithms is introduced. Section 3 formulates the RTS problem by
using the MDRs strategy and states the research objectives. Section 4 describes the
methodology of the proposed intelligent multi-controller. Section 5 presents the study-case
experiment results and the analysis of the proposed intelligent multi-controller approach
as well as other approaches. Finally, Section 6 concludes the paper with a summary and
suggests some topics for future research.
2. Background information for self organising map neural network
A SOM is widely used for data mining because it is a convenient visual tool. Unlike other
artificial neural network (ANN) approaches, the SOM network performs unsupervised
learning, i.e. the processing units in the network adjust their weights through lateral
feedback connections. The more common approach to ANNs requires supervised learning,
i.e. a set of training samples is provided as input and the output is compared with a known
result. Deviations from the correct result lead to adjustments of the weights attached to
the processing units. Such networks are said to be trained when they work satisfactorily
for the test cases. The SOM network, on the other hand, does not require prior knowledge
of the expected result. The nodes in the network converge to form clusters or groups of
entities with similar properties. The number and composition of the clusters can be
represented graphically from the output distribution generated by the learning process.
Three basic steps are involved in the application of the SOM algorithm after
initialisation: sampling, similarity matching, and updating. These three steps are repeated
until the feature map is completed. The SOM algorithm is summarised as follows.
Choose random values for the initial weight vectors wj (0), which must be different for
j ¼ 1, 2, . . . , J, where J is the number of neurons in the lattice. Low-weight values are
International Journal of Production Research
generally preferable. Another way of initialising the algorithm is to select the weight
vectors fwj ð0ÞgJj¼1 randomly from the available set of input vectors fxi gN
Select a training example x from the input space with a certain probability; the vector x
represents the activation pattern that is applied to the lattice.
Find the best-matching (winning) neuron i(x) at time step n by using the minimumdistance Euclidean criterion:
iðxÞ ¼ arg minxðnÞ  wj , j ¼ 1, 2, . . . , J
Adjust the synaptic weight vectors for all the neurons by using the updates formula
wj ðn þ 1Þ ¼ wj ðnÞ þ ðnÞhj,iðxÞ ðnÞ xðnÞ  wj ðnÞ
where ðnÞ is the learning-rate parameter and hj,iðxÞ ðnÞ is the neighbourhood function
centred around the winning neuron i(x). Both ðnÞ and hj,iðxÞ ðnÞ are varied dynamically
during this learning process to achieve the best results.
Continue with step 2 until no noticeable changes in the feature map are observed.
The graphical representation obtained by the SOM approach only provides qualitative
information. Quantitative information can be obtained by focusing on interesting regions
of the map, if not on the map as a whole. While the whole map certainly has interesting
properties, more can be learned if the SOM (and thus the data) consists of distinguishable
regions that can be considered separately. Another option would be to consider each map
unit individually, but this is inconvenient for large maps. Thus, the efficient use of SOMs
requires methods for identifying map unit clusters. It should be emphasised that the goal
here is not necessarily to optimise the clustering process but to gain insight into the cluster
structure for the purpose of data mining. Therefore, the clustering method should be fast,
Vesanto and Alhoniemi (2000) proposed a two-level SOM involving K-means and the
Davies-Bouldin (DB) index (Davies and Bouldin 1979) to solve these problems (Figure 2).
This approach uses the SOM to determine the number of clusters and starting point and
then uses K-means to find the best cluster. In a single-level SOM, a large set of prototypes
is first formed instead of a data cluster. These prototypes can then be interpreted as protoclusters, which in the next phase, are combined to form the actual clusters. The benefit of
using such a SOM is to effectively reduce the computation time and noise, while higher
abstraction levels yield higher distortion. The prototypes are less sensitive to random
variations than the original data because the prototypes are local averages of the data
The DB index is a function of the ratio of the total scatter within a cluster to the
separation between the clusters. The best clustering of a two-level SOM is achieved by
minimising the following DB index, expressed as
where Sc is the distance between nodes within a cluster, dce is the distance between clusters,
3.1 Real time scheduling by intelligent multi-controller
Since the status of manufacturing systems changes continuously, previous studies have
confirmed that it is possible to improve the system performance by implementing a multipass scheduling policy rather than using a single heuristic dispatching rule over an
extended planning horizon. The policy is based on the system status at each decision point
over a series of short-term scheduling period horizons. RTS based on machine learning has
the advantage of rapidly yielding acceptable solutions for the operation of manufacturing
RTS systems that use an intelligent multi-controller approach can be represented by
fO, D, L, Sg, where S is the set of possible system states defining the state of the system at
any given point in time given by fs1 , s2 , . . . , sT g and is described by a conjunction of system
features f. At st system state, the MDRs for the following scheduling period dnext is
implemented by the l 2 L machine learning approach based on the current MDRs denoted
as dcurrent , the system features f, and the given performance criterion o 2 O. Here, the
vector dnext ¼ ½d1 , d2 , . . . , dm T , di 2 D, i ¼ 1, 2, . . . , m, D is the candidate dispatching rule
used in RTS, and m is the number of machine cells on the shop floor. Therefore, the
objective function for a RTS system using an intelligent multi-controller can be defined
International Journal of Production Research
Based on Equation (4), the intelligent multi-controller selects appropriate MDRs
which are determined by system features, current MDRs and the specific machine learning
algorithm for a short-term scheduling period under various performance criteria. By
intelligent multi-controller approach, the RTS systems that use intelligent multi-controller
approach will significantly improve the performance of the SFCS over that classical
machine learning-based based on the SDR approach under various performance criteria in
The study case involves a modification of the model used by Montazeri and Van
Wassenhove (1990). This model is a truly flexible manufacturing system involving:
three machine families (denoted as F1, F2, and F3),
an input buffer and a central work in process (WIP) buffer with sufficient capacity
(v) a computer-controlled local area network.
The first two machine families have two machines each, while the third has a single
machine. Eleven different types of parts are obtained by this model, and their routing and
processing times are identical to those used by Montazeri and Van Wassenhove (1990).
Several operating assumptions are as listed below.
. Raw materials for each type part are readily available.
. Each job order arrives randomly at FMS and consists of only one part with an
. Part with a pallet travels to each machine or load/unload station to achieve
operational flexibility, and the part-type match for one specific pallet problem
. Each machine can execute only one job order at a time.
. Each machine is subject to random seed failures.
. Processing times are assumed to be predetermined.
. Idle machine in a family has a higher priority than other machines to process
a part. If no machine in the family is idle, then the part goes to the least utilised
. When the part finishes each step of the process, it must return to one of the available
load/unload stations for reorientation. Otherwise, it will go to the central WIP
buffer to wait for the next operation (part reorientation in load/unload stations).
. AGV can carry only one part at a time and move only in a counter clockwise
. All material movements that do not involve the AGV system are assumed to be
In the KB requiring a RTS mechanism, let X denote the set of training examples generated
by the training sample generation mechanism. A training example x 2 X can be denoted
are the possible (not necessarily optimal) MDRs for the
following scheduling period under performance criterion o. Three types of performance
criteria are typically studied in scheduling problems: throughput-based, flow-time-based,
and due-date-based criteria. Table 1 lists the three performance criteria used in this study.
This research investigates the essential system attributes that satisfy various performance criteria. Therefore, all the possible system attributes are exhaustively examined.
Table 2 lists 30 candidate attributes. The criteria for their selection are based on earlier
research (Cho and Wysk 1993, Park et al. 1997, Chen et al. 1999, Arzi and Iaroslavitz
2000, Su and Shiue 2003) that considered machine learning and features of the case study
The need for dynamic dispatching rules arises from the fact that no optimal
dispatching rule has yet been found for a variety of shop configurations and operating
conditions (Baker 1984, Montazeri and Van Wassenhove 1990, Shiue and Guh 2006).
Consequently, excessive efforts are not required for studying the best dispatching
heuristics in various environments. Table 3 summarises five dispatching rules that were
found to be effective in earlier studies (Montazeri and Van Wassenhove 1990, Park et al.
1997, Arzi and Iaroslavitz 2000) in terms of the three types of performance criteria
Table 1. Performance criteria used in this study.
CTi: cycle time of the job i ðCTi ¼ FTi  ATi Þ
ATi: time when job i arrives at the system
International Journal of Production Research
As noted above, RTS plays an important role in the complex, dynamic, and highly
stochastic operation of the shop floor environment. Hence, the intelligent multi-controller
Table 2. System attribute used in this study.
The standard deviation of machine utilisation
The mean utilisation of load/unload stations
The minimum imminent operation time of candidate jobs within the system
The maximum imminent operation time of candidate jobs within the system
The mean imminent operation time of candidate jobs within the system
The standard deviation of the imminent operation time of candidate jobs
The minimum total processing time of candidate jobs within the system
The maximum total processing time of candidate jobs within the system
The mean total processing time of candidate jobs within the system
The standard deviation of the total processing time of candidate jobs within
The minimum remaining processing time of candidate jobs within the system
The maximum remaining processing time of candidate jobs within the system
The mean remaining processing time of candidate jobs within the system
The standard deviation of the remaining processing time of candidate jobs
The minimum slack time of candidate jobs within the system
The mean slack time of candidate jobs within the system
The standard deviation of the slack time of candidate jobs within the system
The maximum tardiness of candidate jobs within the system
The mean tardiness of candidate jobs within the system
The standard deviation of the tardiness of candidate jobs within the system
The maximum workload in front of any machine/station within the system
The total workload in front of any machine/station within the system
The mean sojourn time of candidate jobs within the system
The standard deviation of the sojourn time of candidate jobs within the system
The mean time now until due date of candidate jobs within the system
The standard deviation of the time now until due date of candidate jobs within
Table 3. Dispatching rules used in this study.
must be capable of generating acceptable (if not optimal) MDRs in real time in
order to enhance productivity by fully exploiting the dynamic nature of RTS; this is
essentially the concept of agile manufacturing. Therefore, the objective of this study is to
develop an intelligent multi-controller in RTS. This approach can greatly improve the
production performance in comparison with classical SDR based on machine learning and
with the heuristic individual dispatching rules based on various performance criteria.
4. Development of intelligent multi-controller
The proposed intelligent multi-controller shown in Figure 3 comprises three major
components: simulation-based training example generation mechanism, data preprocessing mechanism and SOM-based real-time MDRs selection mechanism. Each of
Simulation-based training example generation mechanism
Figure 3. The proposed intelligent multi-controller.
International Journal of Production Research
4.1 Simulation-based training example generation mechanism
To verify the proposed methodology, a discrete event simulation model is used to generate
the training examples and the reasons are the following. The approach, which is a modified
version of that proposed by Arzi and Iaroslavitz (2000), involves a simulation based on
some MDRs (using a random seed for each pass) given the same initial state of the system
attributes and arriving job streams. In addition, in order to provide comprehensive
training examples representing a wide range of possible system states, the multi-pass
simulation technique (Wu and Wysk 1989) is used for collecting training examples. The
state variable of the system attributes are recorded at the beginning of scheduling decision
point and the performance measures of some MDRs are recorded at the end of a
scheduling period. Figure 4 shows the multi-pass simulation technique used in this study
to generate the training examples. This training examples collection mechanism offers the
advantage of being able to provide various patterns of job arrivals that represent a breadth
of possible system states to learn the concept for SOM-based multi-controller KB.
In this study, the data pre-processing mechanism consists of feature selection and data
4.2.1 Las Vegas filter (LVF) feature selection
Earlier studies (Chen et al. 1999, Su and Shiue 2003, Shiue 2009a) selected suitable system
information on the basis of various production requirements to construct a RTS KB in
machine learning-based RTS and is a crucial research issue due to the existence of a large
amount of shop floor information in a manufacturing system. Using too many attributes
causes over-fitting of the training data and degrades the ability of the RTS system to
generalise the KB. On the other hand, omitting even one important system attribute may
strongly affect the learning process and the ability of the RTS system to classify
Figure 4. The multi-pass technique to generate the training samples procedure.
else if ((Cbest ^ C) and (InconCheck (RF,D) 5 r))
Output: sets of m features satisfying the inconsistency criterion
There are two known general approaches used for feature selection: the filter approach
and the wrapper approach (Liu and Motoda 1998). In the filter approach, the selection
process is carried out independent of the learning algorithm before applying the classifier
to the selected feature subset. This is computationally more efficient than the wrapper
approach, where the classifier system is given a feature subset as input, and the
classification error is estimated using an unseen dataset.
As mentioned above, the intelligent multi-controller cannot be developed on the basis
of a machine learning algorithm using classifiers to construct the KB. Hence, this study
cannot apply the wrapper approach based on classifier predictive accuracy for feature
The Las Vegas filter (LVF) feature selection algorithm is shown in Table 4 (Liu and
Setiono 1996). LVF generates a random feature subset (denoted as RF, where RF  F)
from the feature subset space during each round of execution. If RF contains fewer
features than the current best subset, the inconsistency rate of the dimensionally reduced
data described by RF is compared with the inconsistency rate of the best subset. If RF is at
least as consistent as the best subset, then RF replaces the best subset. The inconsistency
rate of the training data prescribed by a given feature subset is defined over all groups of
matching instances. Within a group of matching instances, the inconsistency count is the
number of instances in the group minus the number of instances in the group with the most
frequent class value. The overall inconsistency rate is the sum of the inconsistency counts
of all groups of matching instances divided by the total number of instances.
A feature is normalised by scaling its values so that they fall within a small specified range
such as 1.0 to þ1.0. Normalisation is particularly appealing with distance-based
International Journal of Production Research
classifiers because by normalising attribute values, we can avoid attributes with large
values that dominate those with smaller values. The three commonly used normalisation
methods are min-max normalisation, z-scores normalisation, and normalisation by
Min-max normalisation is best suited to cases where the upper and lower bounds of
the scores are known. The minimum and maximum scores are mapped to 0 and 1,
respectively. The method of z-scores normalisation is useful when the actual minimum
and maximum values of a feature are unknown or when outliers dominate the min-max
normalisation. Decimal scaling can be applied when the values of different training
examples are distributed on a logarithmic scale. For example, if one training example
has values in the range [0, 1] and another in the range [0, 1000] decimal scaling
normalisation can be applied. The value of the system attributes changes continually in
the shop floor. Hence, the z-scores normalisation method is suited for attribute data
In z-scores normalisation, the values for a feature f are normalised using the mean and
standard deviation of f. A value v of f is normalised to v0 by the following equation:
where f and f are the mean and standard deviation, respectively, of feature f.
4.3 SOM-based real-time MDRs selection mechanism
In the KB building stage, a two-level SOM approach is applied to cluster all the training
examples of the simulation outputs to form an intelligent multi-controller KB. Then, the
multi-controller mechanism inputs the current system status from the shop floor and
sends a suitable (if not optimal) MDRs signal for RTS. The details of the theory are as
4.3.1 Development of a SOM-based multi-controller KB
The intelligent multi-controller is developed in RTS. Clustering the subset of training
examples denoted as SXLVF (i.e. SXLVF as tuple {fLVF , dcurrent }) which are defined as
system features and current MDRs with a similar characteristic, where the system features
by LVF selection of training examples denoted as fLVF . By using two-level SOM clustering
analysis, SX can be classified into various KB classes. If the training data are in the same
class, they can be assigned the same KB class label. By using the two-level SOM process,
a training example with class label n denoted as o xnLVF 2 o XnLVF becomes a 4-tuple
}, where o XnLVF represents the subset of n (i.e. assign class label n)
in XLVF obtained by clustering analysis under performance criterion o, and KBn is the KB
class label n. Figure 5 shows the training examples of the two-level SOM process. The
specific KB label is assigned in each training example.
After establishing a SOM-based multi-controller KB, the following problem arises. By
using the SOM-based multi-controller KB, a specific KB class label can be determined.
Figure 5. Assign specific KB class label by two-level SOM in training.
initialize: SIbest 1; // SI, similarity index
KB class-labeled n TwoLevelSOM (now SXLVF ); // determine matching KB class
for i ¼ 1 to Kn loop // determine matching training examples, where class-labeled n have Kn
SI SimilarMeasure(now SXLVF , i SXLVF ); // calculate similarity by Euclidean distance
Output: employs multi-dispatching rules dnext
However, how to choose the most appropriate MDR for the next scheduling
period among many candidate MDRs in a KB class label still remains to be
solved. This study proposes a MDRs selection algorithm (show in Table 5) to solve this
During the on-line operational phase, the physical component on the shop floor is
responsible for operating the manufacturing system, by implementing RTS at each
scheduling decision point (i.e. the end of a scheduling period). At each decision point, the
physical component records the status of the system. Then, the MDRs selection algorithm
generates the rules for the following scheduling period. There is no general procedure to
determine the right scheduling decision point for each performance criterion by Priore
et al. (2001). Hence, the scheduling period is set to be about two times of average total
processing time (2000 minutes) in this study.
International Journal of Production Research
Table 6. Five part mix ratios generate training examples and training examples KB.
5.1 Constructing a simulation model and generating a training example
To verify the proposed method, a discrete event simulation model is used to generate
training examples. The simulation model is built and executed using Tecnomatix Plant
Simulation (2006), an object-oriented simulation language, and is run on a Core 2 Quad
2.4 GHz CPU with a Windows XP operating system.
The proposed approach is expected to achieve the desired dynamic dispatching
performance. Several production parameters are determined by the preliminary simulation
run. The time between jobs follows an exponential distribution with a mean of 31 minutes.
The due date of each job is randomly assigned from 6 to 10 times of the total processing
time and is uniformly distributed. The maximum number of pallets (jobs) that are
permitted in the FMS system is 100. Table 6 shows five product-mix ratios used to
generate the training examples. The proportions of part types vary continuously every
In order to generate a large number of different training examples, we use 100 different
random seeds to generate 100 different job arrival patterns. The warm-up period for each
run is 10,000 minutes and is followed by 60 multi-pass scheduling periods. The time
window (i.e. scheduling period) of multi-pass simulation is 2000 minutes. A total of 6000
5.2 Development of the SOM-based real-time MDRs selection mechanism
On the basis of Figure 3, it is necessary to choose the system features for constructing the
SOM-based multi-controller KB in advance. The applied LVF feature selection algorithm
is encoded in MATLAB 7.1 (MathWorks 2006). Here, the inconsistency rate is set to 0.5.
Table 7 shows the results of LVF feature selection.
In this study, the two-level SOM is used for clustering the training samples, and it
assigns a KB class label to each performance criterion. The two-level SOM algorithm is
encoded using the MATLAB Neural Network Toolbox (MathWorks 2007). Some
Table 7. The result of selected system feature for each performance
Table 8. SOM parameters used in this study.
Table 9. DB index of each performance criterion.
0.8935 1.0368 0.9520 0.9548 0.7694 0.8258 0.8415 0.7597 0.8147
0.8359 0.9965 0.8714 0.9630 0.8828 0.8664 0.8415 0.8383 0.8347
0.9765 1.1976 0.9756 0.9034 0.8532 1.2367 1.0395 0.8765 0.9266
of the important experimental parameters used in the two-level SOM are described as
Map size range: from 6  6, 7  7, . . . , 11  11, 12  12
Based on the above-mentioned parameters, a total of 7  2  1  2 ¼ 28 times are
implemented by the preliminary training processes. Table 8 shows the determination of
experiment parameters in the two-level SOM based on the best clustering index (i.e. DB
index). Table 9 shows the DB index, which used the K-means value (i.e., the number of
clusters) from 2 to 10 for each performance criterion. It indicates that the minimum DB
index in TP, MCT, and NT is 9, 10, and 6, respectively. Figure 6 shows the best clustering
SOM U-matrix (unified distance matrix) for the TP performance criterion. Based on the
results in Table 9, to meet the TP, MCT, and NT performance criteria, we require 9, 10,
and 6 KB class labels, respectively. Thereafter, the SOM-based real-time MDRs selection
mechanism is established as described in Section 4.3.
International Journal of Production Research
Figure 6. Shows the best clustering SOM U-matrix in TP criterion.
5.3 On-line simulation experiment verification
In this study, the Tecnomatix Plant Simulation model is linked to a C program for the
generation of the multi-controller KB. A SOM-based real-time MDRs selection
mechanism encoded using MATLAB is used as a computation engine. Using simple
data files, the effectiveness of the proposed intelligent multi-controller is examined for
A stream of arriving jobs was generated in simulation over 400,000 minutes by using
different sets of random seeds to investigate whether the proposed intelligent multicontroller approach is more effective over a long period than the RTS using the SDR
approach based on machine learning approach, which includes GA þ DT (Su and Shiue
2003) and GA þ SVM (Shiue 2009a). Here, GA þ DT and GA þ SVM approach involving
the use of GAs evolve optimal subsets of shop floor features and simultaneously determine
a classification algorithm learning parameter. The simulation results indicated that the
GA-based feature selection approach yields better system performance over a long period
of time than that obtained using the classical machine learning approach. Moreover,
a single heuristic dispatching rule was also compared in various scenarios based on three
Table 10 shows the mean and standard deviation of 30 simulation runs – carried out
using 30 random seeds – resulting from different scheduling strategies. The proposed
approach has been shown to be capable of achieving better results, as measured by all
performance criteria, because of its superior efficiency.
A paired-sample t-test was carried out to establish whether the proposed intelligent
multi-controller approach is significantly superior to the GA þ DT and the GA þ SVM
approaches and to heuristic dispatching strategies. The null hypothesis is that the mean
values of all the scheduling strategies are equal. As shown in Table 11, the null hypothesis
is rejected at a significance level of 95% for all the control strategies. Therefore, the
proposed intelligent multi-controller approach is significantly superior to the SDR
approach and other dispatching strategies.
Table 10. The results of intelligent multi-controller approach and the other scheduling strategy
Table 11. A comparison of the paired-sample t-test between intelligent multi-controller approach
and the other scheduling strategy under three production criteria.
This study proposes intelligent multi-controller that uses SOM-based real-time MDRs
selection mechanism to build an RTS for FMS control. The following conclusions can
. The proposed intelligent multi-controller approach offers an intelligent and
dynamic MDRs selection mechanism that is based on the status of a
manufacturing system at the end of a given scheduling period; it then determines
the appropriate MDRs for the following period. The results reveal that over a
long period, this approach provides better system performance than the machine
learning-based RTS based on the SDR approach and heuristic individual
dispatching rules based on various performance criteria.
. The proposed intelligent multi-controller approach can enhance the production
performance compared with the conventional RTS based on machine learning,
which uses a single dispatching rule for all machines. The results agree with
those of Ishii and Talavage (1994) who used a multi-pass simulation approach
. The proposed intelligent multi-controller approach for MDRs is efficient enough
to be incorporated in the operation of an RTS system.
International Journal of Production Research
Some potential research topics for future work arise from the present results:
. The study FMS model used for experiment verification in this study is a relatively
simple manufacturing system. It is necessary to apply the proposed approach to
large, complex manufacturing systems such as semiconductor wafer fabrication
systems or liquid crystal display (LCD) systems. The effectiveness of an intelligent
multi-controller approach might differ in more complex semiconductor wafer
fabrication systems that which have input order wafer lot release control, selection
of a wafer lot by an intra-bay and selection wafer lot by a stocker. Investigating
and examining proposed intelligent multi-controller feasibility through various
manufacturing systems would be a potential topic for future research.
. The present study proposes a MDRs selection algorithm (see Table 5) for
successive scheduling periods. Although this approach is feasible, the drawback of
the proposed method is its inability to respond to shop floor environmental
change. A possible solution will incorporate a reinforcement learning mechanism
(Stutton and Barto 1998) that can learn to select proper actions for achieving its
goals through interactions with the system environment and responding to
receipts of rewards or penalties based on the impact of each action.
This work was supported in part by the National Science Council, ROC, under Contract No.
Arzi, Y. and Iaroslavitz, L., 1999. Neural network-based adaptive production control system for
flexible manufacturing cell under a random environment. IIE Transactions, 31 (3), 217–230.
Arzi, Y. and Iaroslavitz, L., 2000. Operating an FMC by a decision-tree-based adaptive production
control system. International Journal of Production Research, 38 (3), 675–697.
Baker, K.R., 1984. Sequencing rules and due-date assignments in a job shop. Management Science,
Chang, C.C. and Lin, C.J., 2006. LIBSVM 2.82: A library for support vector machines [online].
Available from: http://www.csie.ntu.edu.tw/cjlin/libsvm/ [Accessed 10 April 2006].
Chen, C.C., Yih, Y., and Wu, Y.C., 1999. Auto-bias selection for learning-based scheduling systems.
International Journal of Production Research, 37 (9), 1987–2002.
Cho, H. and Wysk, R.A., 1993. A robust adaptive scheduler for an intelligent workstation
controller. International Journal of Production Research, 31 (4), 771–789.
Cho, H. and Wysk, R.A., 1995. Intelligent workstation controller for computer-integrated
manufacturing: problems and models. Journal of Manufacturing Systems, 14 (4), 252–263.
Davies, F.D. and Bouldin, D.W., 1979. A cluster separation measure. IEEE Transactions on Pattern
Analysis and Machine Intelligence, 1 (2), 224–227.
Goldberg, D.E., 1989. Genetic Algorithms in search, optimisation and machine learning. Reading,
Han, J. and Kamber, M., 2006. Data mining concepts and techniques. 2nd ed. San Francisco: Morgan
Ishii, N. and Talavage, J.J., 1994. A mixed dispatching rule approach in FMS scheduling.
International Journal of Flexible Manufacturing Systems, 6 (1), 69–87.
Kim, C.O., Min, H.S., and Yih, Y., 1998. Integration of inductive learning and neural networks
for multi-objective FMS scheduling. International Journal of Production Research, 36 (9),
Kohonen, T., 2001. Self-organising map. 3rd ed. New York: Springer-Verlag.
Kwak, C. and Yih, Y., 2004. Data mining approach to production control in the computer
integrated testing cell. IEEE Transactions on Robotics and Automation, 20 (1), 107–116.
Lee, J., 2003. E-manufacturing – fundamental, tools, and transformation. Robotics and ComputerIntegrated Manufacturing, 19 (6), 501–507.
Liu, H. and Motoda, H., 1998. Feature selection for knowledge discovery and data mining. Boston:
Liu, H. and Setiono, R., 1996. A probabilistic approach to feature selection – a filter solution.
Proceedings of the 13th international conference on machine learning, 3–6 July 1996, Bari, Italy.
San Francisco: Morgan Kaufmann Publishers, 319–327.
Liu, J. and MacCarthy, B.L., 1996. The classification of FMS scheduling problems. International
Journal of Production Research, 34 (3), 647–656.
MathWorks Inc., 2006. Matlab version 7.1 user’s guide. Natick, MA: MathWorks.
MathWorks Inc., 2007. Matlab neural network toolbox version 5 user’s guide. Natick, MA:
Min, H.S. and Yih, Y., 2003. Development of a real-time multi-objective scheduler for a
semiconductor fabrication system. International Journal of Production Research, 41 (16),
Montazeri, M. and Van Wassenhove, L.N., 1990. Analysis of scheduling rules for an FMS.
International Journal of Production Research, 28 (4), 785–802.
Park, S.C., Raman, N., and Shaw, M.J., 1997. Adaptive scheduling in dynamic flexible
manufacturing systems: a dynamic rule selection approach. IEEE Transactions on Robotics
Priore, P., et al., 2001. A review of machine learning in dynamic scheduling of flexible manufacturing
systems. Artificial Intelligence for Engineering Design, Analysis & Manufacturing, 15 (3),
Priore, P., et al., 2006. A comparison of machine-learning algorithms for dynamic scheduling
of flexible manufacturing systems. Engineering Applications of Artificial Intelligence, 19 (3),
Qiu, R., Wysk, R., and Xu, Q., 2003. Extended structured adaptive supervisory control model
of shop floor controls for an e-Manufacturing system. International Journal of Production
Quinlan, J.R., 1986. Induction of decision trees. Machine Learning, 1 (1), 81–106.
Quinlan, J.R., 1987. Simplifying decision trees. International Journal of Man–Machine Studies,
Quinlan, J.R., 1993. C4.5: Programs for machine learning. San Manteo: Morgan Kaufmann.
Rumelhart, D.E., Hinton, G.E., and Williams, R.J., 1986. Learning internal representations by error
propagation. Parallel distributed processing. Cambridge: MA Press.
Shiue, Y.R., 2009a. Data mining-based dynamic dispatching rule selection mechanism for shop floor
control systems using support vector machine approach. International Journal of Production
Shiue, Y.R., 2009b. Development of two-level decision tree-based real-time scheduling system under
product mix variety environment. Robotics and Computer-Integrated Manufacturing, 25 (4–5),
Shiue, Y.R. and Guh, R.S., 2006. Learning-based multi-pass adaptive scheduling for a dynamic
manufacturing cell environment. Robotics and Computer-Integrated Manufacturing, 22 (3),
International Journal of Production Research
Shnits, B. and Sinreich, D., 2006. Controlling flexible manufacturing systems based on a dynamic
selection of the appropriate operational criteria and scheduling policy. International Journal
of Flexible Manufacturing Systems, 18 (1), 1–27.
Stutton, R.S. and Barto, G.B., 1998. Reinforcement learning: An introduction. Cambridge:
Su, C.T. and Shiue, Y.R., 2003. Intelligent scheduling controller for shop floor control systems: a
hybrid genetic algorithm/decision tree learning approach. International Journal of Production
Tecnomatix Plant Simulation, 2006. Tecnomatix plant simulation 7.6 user guide. Plano: Tecnomatix
Vapnik, V.N., 1999. The nature of statistical learning theory. 2nd ed. New York: Springer.
Vesanto, J. and Alhoniemi, E., 2000. Clustering of the self-organising map. IEEE Transactions
Wu, S.D. and Wysk, R.A., 1989. An application of discrete-event simulation to on-line control and
scheduling in flexible manufacturing. International Journal of Production Research, 27 (9),
Copyright of International Journal of Production Research is the property of Taylor & Francis Ltd and its
content may not be copied or emailed to multiple sites or posted to a listserv without the copyright holder's
express written permission. However, users may print, download, or email articles for individual use.
