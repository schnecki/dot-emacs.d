-- GlobRegex.hs --- 
-- 
-- Filename: GlobRegex.hs
-- Description: 
-- Author: Manuel Schneckenreither
-- Maintainer: 
-- Created: Fr Okt 11 11:03:03 2013 (+0200)
-- Version: 
-- Package-Requires: ()
-- Last-Updated: Fr Okt 11 19:27:51 2013 (+0200)
--           By: Manuel Schneckenreither
--     Update #: 38
-- URL: 
-- Doc URL: 
-- Keywords: 
-- Compatibility: 
-- 
-- 

-- Commentary: 
-- 
-- 
-- 
-- 

-- Change Log:
-- 
-- Code:


module GlobRegex
    ( globToRegex
    , matchesGlob
    ) where

import Text.Regex.Posix ((=~))

data GlobError = GlobError String deriving (Show)

globToRegex :: String -> Either GlobError String
globToRegex cs =
  
  case globToRegex' cs of
  Left x -> Left x
  Right str -> Right ('^' : str ++ "$")
  where res = globToRegex' cs

globToRegex' :: String -> Either GlobError String
globToRegex' "" = Right ""
globToRegex' ('*':cs) = Right (".*" ++ globToRegex' cs)
globToRegex' ('?':cs) = '.' : globToRegex' cs
globToRegex' ('[':'!':c:cs) = "[^" ++ c : charClass cs
globToRegex' ('[':c:cs) = "[" ++ c : charClass cs
globToRegex' ('[':_) = error "unterminated character class"
globToRegex' (c:cs) = escape c ++ globToRegex' cs


escape :: Char -> String
escape c | c `elem` regexChars = '\\' : [c]
         | otherwise = [c]
  where regexChars = "\\+()^$.{}]|"


charClass :: String -> String
charClass (']':cs) = ']' : globToRegex' cs
charClass (c:cs) = c : charClass cs
charClass [] = error "unterminated character class"

matchesGlob :: FilePath -> String -> Bool
name `matchesGlob` pat = name =~ globToRegex pat



-- 
-- GlobRegex.hs ends here
