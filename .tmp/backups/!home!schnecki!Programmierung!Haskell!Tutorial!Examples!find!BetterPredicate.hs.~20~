-- BetterPredicate.hs --- 
-- 
-- Filename: BetterPredicate.hs
-- Description: 
-- Author: Manuel Schneckenreither
-- Maintainer: 
-- Created: Sa Okt 12 13:45:54 2013 (+0200)
-- Version: 
-- Package-Requires: ()
-- Last-Updated: Mo Okt 14 01:23:11 2013 (+0200)
--           By: Manuel Schneckenreither
--     Update #: 89
-- URL: 
-- Doc URL: 
-- Keywords: 
-- Compatibility: 
-- 
-- 

-- Commentary: 
-- 
-- 
-- 
-- 

-- Change Log:
-- 
-- 
-- Code:

module BetterPredicate where



import Control.Monad (filterM)
import System.Directory (Permissions(..), getModificationTime, getPermissions)
import System.Time (ClockTime(..))
import System.FilePath (takeExtension)
import Control.OldException (bracket, handle)
import System.IO (IOMode(..), hClose, hFileSize, openFile)
import RecursiveContents (getRecursiveContents) -- the function we wrote earlier


-- synonym for function
type InfoP a = FilePath
               -> Permissions
               -> Maybe Integer
               -> ClockTime
               -> a
               
getFileSize :: FilePath -> IO (Maybe Integer)
getFileSize path = handle (\_ -> return Nothing) $ do
  bracket (openFile path ReadMode) hClose $ \h -> do
    size <- hFileSize h
    return (Just size)


betterFind :: InfoP Bool -> FilePath -> IO [FilePath]
betterFind p path = getRecursiveContents path >>= filterM check
  where check name = do
          perms <- getPermissions name
          size <- getFileSize name
          modified <- getModificationTime name
          return (p name perms size modified)

pathP :: InfoP FilePath
pathP path _ _ _ = path

sizeP :: InfoP Integer
sizeP _ _ (Just size) _ = size
sizeP _ _ Nothing _ = -1


equalP :: (Eq a) => InfoP a -> a -> InfoP Bool
equalP f k = \w x y z -> f w x y z == k

equalP' :: (Eq a) => InfoP a -> a -> InfoP Bool
equalP' f k w x y z = f w x y z == k  


liftP :: (a -> b -> c) -> InfoP a -> b ->  InfoP c
liftP q f k w x y z = f w x y z `q` k

constP :: a -> InfoP a
constP k _ _ _ _ = k

liftP' q f k = liftP2 q f (constP k)


greaterP, lesserP :: (Ord a) => InfoP a -> a -> InfoP Bool 
greaterP = liftP (>)
lesserP = liftP (<)

simpleAndP :: InfoP Bool -> InfoP Bool -> InfoP Bool
simpleAndP f g w x y z = f w x y z && g w x y z


liftP2 :: (a -> b -> c) -> InfoP a -> InfoP b -> InfoP c
liftP2 q f g w x y z = f w x y z `q` g w x y z


andP = liftP2 (&&)
orP = liftP2 (||)

(==?) = equalP
(&&?) = andP
(>?) = greaterP
infix 4 ==?
infixr 3 &&?
infix 4 >?


myTest3 = (liftPath takeExtension ==? ".hs") &&? (sizeP >? 131)
myTest4 = liftPath takeExtension ==? ".hs" &&? sizeP >? 131


liftPath :: (FilePath -> a) -> InfoP a
liftPath f w _ _ _ = f w


myTest2 = (liftPath takeExtension `equalP` ".hs") `andP`
          (sizeP `greaterP` 131)

myTest path _ (Just size) _ =
    takeExtension path == ".cpp" && size > 131072
myTest _ _ _ _ = False


saferFileSize :: FilePath -> IO (Maybe Integer)
saferFileSize path = handle (\_ -> return Nothing) $ do
  h <- openFile path ReadMode
  size <- hFileSize h
  hClose h
  return (Just size)



simpleFileSize :: FilePath -> IO Integer
simpleFileSize path = do
  h <- openFile path ReadMode
  size <- hFileSize h
  hClose h
  return size

-- 
-- BetterPredicate.hs ends here
