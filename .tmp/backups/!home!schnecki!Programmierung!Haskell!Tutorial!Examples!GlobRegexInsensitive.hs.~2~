-- GlobRegex.hs --- 
-- 
-- Filename: GlobRegex.hs
-- Description: 
-- Author: Manuel Schneckenreither
-- Maintainer: 
-- Created: Fr Okt 11 11:03:03 2013 (+0200)
-- Version: 
-- Package-Requires: ()
-- Last-Updated: Fr Okt 11 14:18:22 2013 (+0200)
--           By: Manuel Schneckenreither
--     Update #: 55
-- URL: 
-- Doc URL: 
-- Keywords: 
-- Compatibility: 
-- 
-- 

-- Commentary: 
-- 
-- 
-- 
-- 

-- Change Log:
-- 
-- Code:


module GlobRegex
    ( globToRegex
    , matchesGlob
    ) where

import Text.Regex.Posix ((=~))
import Data.Char (toUpper, toLower)

globToRegex :: String ->  Bool -> String
globToRegex cs sens = '^' : globToRegex' cs sens ++ "$"

globToRegex' :: String -> Bool -> String
globToRegex' "" _ = ""
globToRegex' ('*':cs) sens = ".*" ++ globToRegex' cs sens 
globToRegex' ('?':cs) sens = '.' : globToRegex' cs sens
globToRegex' ('[':'!':c:cs) sens = "[^" ++ c : charClass cs sens
globToRegex' ('[':c:cs) sens = "[" ++ c : charClass cs sens 
globToRegex' ('[':_) sens = error "unterminated character class"
globToRegex' (c:cs) sens = escape c sens ++ globToRegex' cs sens


escape :: Char -> Bool ->  String
escape c sens | c `elem` regexChars = addChar ('\\' : [c]) sens 
              | otherwise = addChar [c] sens 
  where regexChars = "\\+()^$.{}]|"


addChar :: String -> Bool -> String
addChar str sens = if sens then str else map toLower str ++ map toUpper str

charClass :: String -> Bool -> String
charClass (']':cs) sens = ']' : globToRegex' cs sens
charClass (c:cs) sens = toLower c : toUpper c : charClass cs sens
charClass [] _ = error "unterminated character class"

matchesGlob :: FilePath -> String -> Bool-> Bool
matchesGlob name pat sensitive = name =~ globToRegex pat sensitive


-- 
-- GlobRegex.hs ends here
