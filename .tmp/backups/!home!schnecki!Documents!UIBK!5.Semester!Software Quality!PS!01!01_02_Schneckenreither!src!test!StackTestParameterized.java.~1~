package qm.test;

import java.util.Random;

import junit.framework.JUnit4TestAdapter;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runners.Parameterized;
import qm.Stack;

/**
 *  Unit Test for class StackTestParameterized.
 *
 *
 * Created: Wed Oct 16 21:21:06 2013
 *
 * @author <a href="mailto:manuel.schneckenreither@student.uibk.ac.at">Manuel Schneckenreither</a>
 * @version 1.0
 */
@RunWith(Parameterized.class)
public class StackTestParameterized {
    
    private Integer size;


    public StackTestParameterized(int size) {
        this.size = size;
    }




    
    /**
     * Test for method isEmpty.
     */
    @Test
    public void isEmptyTest() {
        // new stack obj
        Stack stack = new Stack(MAX_STACK);

        assertTrue(stack.isEmpty());

        Integer num = new Random().nextInt(MAX_STACK);
        // push something on the stack(num times)
        for (int i = 0; i < num; i++) {
            pushRandomStack(stack);
            assertFalse(stack.isEmpty());
        }


        // pop from stack again
        for (int i = 0; i < num; i++) {
            assertFalse(stack.isEmpty());
            stack.pop();
        }
        assertTrue(stack.isEmpty());

    } // isEmptyTest


    /**
     * Test for method push.
     */
    @Test
    public void pushTest() {
        Stack stack = new Stack(MAX_STACK);

        assertTrue(stack.size() == 0);

        for (int i = 0; i < MAX_STACK; i++) {
            assertTrue(stack.size() == i);
            pushRandomStack(stack);
            assertFalse(stack.size() == 0);
        }

    } // pushTest


    /**
     * Test for method push2.
     */
    @Test (expected=StackOverflowError.class)
    public void pushErrorTest() {
        Stack stack = new Stack(new Random().nextInt(MAX_STACK));
        int i = 0;
        while (true) {
            pushRandomStack(stack);
            assertEquals(stack.size(), ++i);
        }
    } // push2Test


    /**
     * Test for method pop.
     */
    @Test
    public void popTest() {
        Stack stack = new Stack(MAX_STACK);

        assertTrue(stack.size() == 0);

        for (int i = 0; i < MAX_STACK; i++) {
            stack.push(i);
        }


        for (int i = MAX_STACK; i > 0; i--) {
            assertEquals(stack.size(), i);
            assertEquals(stack.pop(), i-1);
        }

    } // popTest


    /**
     * Test for method popError.
     */
    @Test
    public void popErrorTest() {
        Stack stack = new Stack(MAX_STACK);

        for (int i = 0; i < MAX_STACK; i++) {
            pushRandomStack(stack);
        }

        for (int i = 0; i < MAX_STACK; i++) {
            assertTrue(stack.pop() != -1);
        }

        for (int i = 0; i < new Random().nextInt(10); i++) {
            assertEquals(stack.pop(), -1);
        }
    } // popErrorTest


    /**
     * Test for method size.
     */
    @Test
    public void sizeTest() {
        Stack stack = new Stack(MAX_STACK);

        int i = 0;
        for (; i < new Random().nextInt(MAX_STACK); i++) {
            assertEquals(stack.size(), i);
            pushRandomStack(stack);
        }

        // Check size behaviour when not empty
        for (; i > 0; i--) {
            assertEquals(stack.size(), i);
            stack.pop();
        }

        // check size bahaviour when empty
        for (int j = 0; j < new Random().nextInt(10); j++) {
            assertEquals(stack.size(), 0);
        }


    } // sizeTest


    /**
     * Test for method top.
     */
    @Test
    public void topTest() {
        Stack stack = new Stack(MAX_STACK);

        // behaviour on empty stack
        for (int i = 0; i < new Random().nextInt(MAX_STACK); i++) {
            assertEquals(stack.top(), -1);
        }

        // behaviour when not empty
        for (int i = 0; i < MAX_STACK; i++) {
            pushRandomStack(stack);
            // check several times to ensure this is not a pop function
            for (int j = 0; j < new Random().nextInt(10); j++) {
                assertTrue(stack.top() != -1);
            }
        }

        // empty stack
        while(stack.size() != 0) {
            assertTrue(stack.top() != -1);
            stack.pop();
        }

        // behaviour on empty stack
        for (int i = 0; i < new Random().nextInt(MAX_STACK); i++) {
            assertEquals(stack.top(), -1);
        }


    } // topTest


    private void pushRandomStack(Stack stack) {
        stack.push(new Random().nextInt(100));
    } // pushRandomStack

}


