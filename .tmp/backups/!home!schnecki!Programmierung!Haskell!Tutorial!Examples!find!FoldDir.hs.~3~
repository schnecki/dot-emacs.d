-- FoldDir.hs --- 
-- 
-- Filename: FoldDir.hs
-- Description: 
-- Author: Manuel Schneckenreither
-- Maintainer: 
-- Created: Sa Okt 12 21:18:35 2013 (+0200)
-- Version: 
-- Package-Requires: ()
-- Last-Updated: Mo Okt 14 17:33:41 2013 (+0200)
--           By: Manuel Schneckenreither
--     Update #: 18
-- URL: 
-- Doc URL: 
-- Keywords: 
-- Compatibility: 
-- 
-- 

-- Commentary: 
-- 
-- 
-- 
-- 

-- Change Log:
-- 
-- 
-- Code:

import Control.Monad (forM, liftM, filterM)
import System.Time (ClockTime(..))
import System.FilePath ((</>), takeExtension, takeFileName)
import System.Directory (Permissions(..), getModificationTime, getPermissions, getDirectoryContents)
import Control.OldException (bracket, handle)
import System.IO (IOMode(..), hClose, hFileSize, openFile)
import GHC.Exts (sortWith)
import BetterPredicate
import Data.List (sortBy, isInfixOf)
import Data.Ord (comparing)
import Data.Char(toLower)

data Info = Info { infoPath :: FilePath
                 , infoPerms :: Maybe Permissions
                 , infoSize :: Maybe Integer
                 , infoModTime :: Maybe ClockTime
                 } deriving (Eq, Ord, Show)


data Iterate seed = Done { unwrap :: seed }
                  | Skip { unwrap :: seed }
                  | Continue { unwrap :: seed }
                  deriving (Show)
                             


type Iterator seed = seed -> Info -> Iterate seed

foldTree :: Iterator a -> a -> FilePath -> IO a
foldTree iter initSeed path = do
    endSeed <- fold initSeed path
    return (unwrap endSeed)
  where
    fold seed subpath = getUsefulContents subpath >>= walk seed
    walk seed (name:names) = do
      let path' = path </> name
      info <- getInfo path'
      case iter seed info of
        done@(Done _) -> return done
        Skip seed'    -> walk seed' names
        Continue seed'
          | isDirectory info -> do
            next <- fold seed' path'
            case next of
              done@(Done _) -> return done
              seed''        -> walk (unwrap seed'') names
          | otherwise -> walk seed' names
    walk seed _ = return (Continue seed)


atMostThreePictures :: Iterator [FilePath]
atMostThreePictures paths info
    | length paths == 3 = Done paths
    | isDirectory info && takeFileName path == ".svn"
      = Skip paths
    | extension `elem` [".jpg", ".png"]
      = Continue (path : paths)
    | otherwise = Continue paths
  where
    extension = map toLower (takeExtension path)
    path = infoPath info
    
      
  

isDirectory :: Info -> Bool
isDirectory = maybe False searchable . infoPerms

getUsefulContents :: FilePath -> IO [String]           
getUsefulContents path = do
  names <- getDirectoryContents path
  return (filter (`notElem` [".", ".."]) names)

maybeIO :: IO a -> IO (Maybe a)
maybeIO act = handle (\_ -> return Nothing) (Just `liftM` act)

getInfo :: FilePath -> IO Info
getInfo path = do
  perms <- maybeIO (getPermissions path)
  size <- maybeIO (bracket (openFile path ReadMode) hClose hFileSize)
  modified <- maybeIO (getModificationTime path)
  return (Info path perms size modified)



-- 
-- FoldDir.hs ends here
